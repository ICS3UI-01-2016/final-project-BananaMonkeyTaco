; Whenever someone joins the chat
on *:join:%channel: {
  ; Don't do anything if the user is a bot
  if ($nick == bananamtbot || $nick == revlobot || $nick == nightbot) {
    ; Do nothing
    return
  }
  else {
    ; Activates the timer "timerpoints.User"
    ; This timer will call the alias(method) regularPoints every 60 seconds
    ; This also sends the user as a variable for the method
    $+(timerpoints.,$nick) 0 60 regularPoints $nick
    ; Activates the timer "timerleadboard.User"
    ; Same as the above timer, will explain more in the method itself 
    $+(timerleaderboard.,$nick) 0 60 leaderboardPoints $nick
    ; This sends a message to the window, not the chat
    echo 12 -at $nick joined and is receiving %points
  }
}
; Whenever someone leaves the chat
on *:part:%channel:{
  ; No if statements to exclude anyone because mIRC can turn off timers that don't exist
  ; Turn off the timer "timerpoints.User"
  $+(timerpoints.,$nick) off
  ; Turn off the timer "timerleaderboard.User"
  $+(timerleaderboard.,$nick) off
  ; Send a message to the window
  echo 12 -at $nick has left and is no long receiving %points
}
; Used to give a user one more point
alias -l regularPoints {

  ; ONLY EXPLAINING THIS ONCE PAY ATTENTION
  ; Use the n switch (-n) to make sure mIRC doesn't look at the ini in computer language
  ; The location to write to is the ini, topic, item, value
  ; The new value is the calculation of the previous value plus 1
  ; The old value is found with the $readini which functions like the writeini but returns instead of edits

  ; Add one point to the user's previous points
  ; $1 is the variable received from the timer
  writeini -n %ini %points $1 $calc($readini(%ini,%points,$1)+1)
}
; User to give a user one more point to the leaderboard
; This is different from the basic points in that no points are taken away from this ini
; This ini shows only how much time a user has spent in the chat
alias -l leaderboardPoints {
  ;Add one more point to the user's previous points
  writeini -n Leaderboard.ini %points $1 $calc($readini(Leaderboard.ini,%points,$1)+1)
}
; Alias used when a user does not respond to a duel for one minute
alias -l cancelduel {
  ; Tell the chat that the duelee did not respond
  msg $chan %duelee has run out of time to accept the challenge from %dueler and must now live in extreme shame.
  ; Reset the variables to prevent any errors later
  %dueler = null
  %duelee = null
  %stakes = null
}
; Alias used to sort the ini files by user with the most points to the user with the least points
alias inisort {
  ; Create 4 windows
  window @sortPointsIn
  window @sortPointsOut
  window @sortLeaderboardIn
  window @sortLeaderboardOut
  ; Load the Basic ini into the sortPointsIn window
  loadbuf -t @sortPointsIn %ini
  ; Clear the sortPointsOut window and filter everything in the sortPointsIn window into the sortPointsOut window
  ; The -t switch sorts everything, the -e switch makes it sort in descending order, and the -u switch makes the sort numerical
  ; The two numbers seperates each user and their points by the equals sign. The equals sign is character 61 in ASCII
  ; The user's points is the 2nd value in a line when a "value" is seperated by the equals sign. User=Points. Value one "User" Value two "Points"
  filter -cteu 2 61 @sortPointsIn @sortPointsOut
  ; Next two lines are the same thing but for the leaderboard ini file
  loadbuf -t @sortLeaderboardIn Leaderboard.ini
  filter -cteu 2 61 @sortLeaderboardIn @sortLeaderboardOut
  ; Because the sorting was numerical the topic [Points] was sorted to the bottom, making all values under no topic
  ; To fix this we readd the topic to the top of the sorted windows
  iline @sortPointsOut 1 [Bananas]
  iline @sortLeaderboardOut 1 [Bananas]
  ; Because the ini file has not actually been sorted we need to clear it out by deleting the topic
  remini %ini Bananas
  ; Save what is in the sorted window to the ini file
  savebuf -a @sortPointsOut %ini
  ; Same thing but for the leaderboard ini file
  remini Leaderboard.ini Bananas
  savebuf -a @sortLeaderboardOut Leaderboard.ini
  ; Close the unneeded windows
  window -c @sortPointsIn
  window -c @sortPointsOut
  window -c @sortLeaderboardIn
  window -c @sortLeaderboardOut
}
; Command for a user requesting how many points they have
on *:text:!bananas:%channel: {
  ; Message the channel 
  msg $chan $nick has $readini(%ini,%points,$nick) %points
  ; Message the window what happened
  echo 12 -t $nick requested amount of %points
}
; Command to give a user points without having to edit the ini file manually
; Activated if the chat message BEGINS with !givebananas
on *:text:!givebananas*:%channel: {
  ; Check to see if the user is an op in the channel
  if ($nick isop %channel) {
    ; Make sure that there are 3 seperate values
    if ($0 == 3) {
      ; Make sure the 3rd value is a number
      if ($3 isnum) {
        ; Give the amount of points specified (3rd value/$3) to the user specified (2nd value/$2)
        ; Both positive and negative numbers will work
        writeini -n %ini %points $2 $calc($readini(%ini,%points,$2)+ $3)
        ; Send a message to the chat showing the user receiving point
        msg $chan $2 has been given $3 %points
      }
      ; If the 3rd value isn't a number
      else {
        ; Say that a number is needed
        msg $chan You must give a number to give.
      }
    }
    ; If 3 values aren't given
    else if ($0 != 3) {
      ; Say that 3 values/words are needed
      msg $chan Error. Command requires 3 words. !givebananas, Name, Number of %points to give.
    }
  }
  ; If the user isn't an op/mod in the channel
  else {
    ; Tell the user to get lost
    msg $chan This command is for mods only.
  }
}
; Command to give all current viewers an amount of points
on *:text:!giveall*:%channel: {
  ; Make sure the user is a moderator for the chat
  if ($nick isop %channel) {
    ; Make sure there are only 2 words for the command
    if ($0 == 2) {
      ; Make sure the second word is a number
      if ($2 isnum) {
        ; Make a window
        window @names
        ; Filter all the values in the channel's listbox to the window
        ; For the channel, the listbox will contain all the users in the chat
        filter -l $chan @names
        ; Refilter the window but exclude any values containing nightbot
        filter -cx @names @names *nightbot*
        ; The same as above but for bananamtbot
        filter -cx @names @names *bananamtbot*
        ; Make a varieable for the amount of lines left in the window
        %temp = $lines(@names)
        ; While loop
        while (%temp > 0) {
          ; Standard writing to the ini file but the user is found by using a line from the window
          writeini -n %ini %points $line(@names,%temp) $calc($readini(%ini,%points,$line(@names,%temp))+ $2)
        }
        ; Close the unneeded window
        window -c @names
      }
      ; If the second word was not a number
      else {
        ; Say that a number is required
        msg $chan %points to give must be a number
      }
    }
    ; If more or less than 2 values are given
    else {
      ; Say that an incorrect amount of values was given
      msg $chan incorrect amount of values given.
    }
  }
  ; If the user is not a moderator for the chat
  else {
    ; Tell them that they aren't good enough for this command
    msg $chan This command is for mods only
  }
}
; Command for unfinshed info doc about the bot
on *:text:!info:%channel: {
  msg $chan For information about me check out this Google Doc: https://docs.google.com/document/d/1qJfsyScG3XepkhOqKGcETzF7QLC9hV876QphGW2woU8/edit?usp=sharing
}
; Command for sorting the ini files
on *:text:!sort:%channel: {
  ; Check to see if the user is the Great Almighty
  if ($nick == bananamonkeytaco) {
    ; Call the inisort method
    $inisort
  }
}
; Command for the great evil that everyone does anyways
on *:text:!gamble*:%channel: {
  ; If 2 values aren't given
  if ($0 != 2) {
    ; Tell the user he's had too much to drink and to stop gambling
    msg $chan Error. Gamble command requires !gamble and a number.
  }
  ; If the value to be gambled is more than 1000
  else if ($2 > 1000) {
    ; Tell the user that he shouldn't gamble his kid's college fund
    msg $chan You cannot gamble more than 1000 %points
  }
  ; If everything checks out
  else {
    ; Make a random number in between/including 1 - 100
    %num = $rand(1,100)
    ; If the number rolled is more than 60
    if (%num > 60) {
      ; Tell the chat and user what he rolled and that he won his points (doubled)
      msg $chan $nick has rolled %num and won $2 %points
      ; Go to the BASIC ini file and give the user the points he won
      writeini -n %ini %points $nick $calc($readini(%ini,%points,$nick)+ $2)
    }
    ; If the number rolled is 60 or less
    else if (%num <= 60) {
      ; Tell the user what he rolled and the sad news
      msg $chan $nick has rolled %num and lost $2 %points
      ; Go to the BASIC ini file and take away the points the user lost
      writeini -n %ini %points $nick $calc($readini(%ini,%points,$nick)- $2)
    }
  }
}
; Command for the command the most work was put into but nobody ever uses
on *:text:!duel*:%channel: {
  ; Make sure 3 seperate values are given
  if ($0 = 3) {
    ; Make sure a duel isn't already in progress
    if (%dueler == null) {
      ; Make sure the stakes are not over 1000
      if ($3 > 1000) {
        ; Remind people not to gamble away their kids college funds
        msg $chan Sorry but gambling over 1000 %points is not allowed.
      }
      ; If everything checks out
      else {
        ; Notify the chat that a duel has been issued
        msg $chan $nick has challenged $2 to a duel worth $3 %points ! $2 do you accept or decline this duel?
        ; Set the dueler variable to the person who started it
        %dueler = $nick
        ; The person being challenged is labelled as the duelee and is the second value given
        %duelee = $2
        ; The stakes are the amount of points being bet with and is the third value given
        %stakes = $3
        ; Start a timer to cancel the challenge if unanswered for one minute
        ; Timer will only activate once
        timerduel 1 60 cancelduel
      }
    }
    ; If a duel is already taking place
    else {
      ; Notify the user that a duel is already taking place
      msg $chan Sorry, but there is already a duel that has been started. Please wait until that duel expires before requesting another.
    }
  }
  ; If more or less than 3 values are given
  else if ($0 != 3) {
    ; Tell the user how to user the command correctly
    msg $chan Error. This command requires 3 words. !duel, Name, Number of %points to bet.
  }
}
; On text event for someone accepting a duel
on *:text:!accept:%channel: {
  ; Check to see if it's the duelee accepting the duel
  if (%duelee == $nick) {
    ; Turn off the timer that cancels the duel
    timerduel off
    ; Message the chat that a duel is now commencing
    msg $chan %duelee has accepted the duel from %dueler for %stakes %points . It's time to ROLL!
    ; Make two random number between/including 1 - 100
    %duelerRoll = $rand(1,100)
    %dueleeRoll = $rand(1,100)
    ; Take away the stakes from both participants
    writeini -n %ini %points %dueler $calc($readini(%ini,%points,%dueler)-%stakes)
    writeini -n %ini %points %duelee $calc($readini(%ini,%points,%duelee)-%stakes)
    ; Message the chat what the dueler rolled
    msg $chan %dueler started the duel and rolls first. He rolls a %duelerRoll now let's wait and see what %duelee will roll.
    ; Message the chat what the duelee rolled
    msg $chan %duelee rolls a %dueleeRoll
    ; If the dueler won
    if (%duelerRoll > %dueleeRoll) {
      ; Tell the chat that the dueler won and how much he won
      msg $chan %dueler has won the duel and won $calc(%stakes * 2)
      ; Give the dueler their winnings
      writeini -n %ini %points %dueler $calc($readini(%ini,%points,%dueler)+$calc(%stakes * 2))
    }
    ; If the duelee won
    else if (%dueleeRoll > %duelerRoll) {
      ; Tell the chat that the duelee won and how much he won
      msg $chan %duelee has won the duel and won $calc(%stakes * 2)
      ; Give the duelee their winnings
      writeini -n %ini %points %duelee $calc($readini(%ini,%points,%duelee)+$calc(%stakes * 2))
    } 
    ; If the duel was a tie
    else if (%dueleeRoll == %duelerRoll) {
      ; Tell the chat that the duel was a tie
      msg $chan Both %duelee and %dueler rolled %duelerrRoll so neither has won the duel.
      ; Give both participants their points back
      writeini -n %ini %points %dueler $calc($readini(%ini,%points,%dueler)+%stakes)
      writeini -n %ini %points %duelee $calc($readini(%ini,%points,%duelee)+%stakes)
    }
    ; Reset all the variable to prevent mix ups in the code the next time a duel takes place
    %duelee = null
    %dueler = null
    %stakes = null
    %dueleeRoll = null
    %duelerRoll = null
  }
}
; On text event for a user declining a duel
on *:text:!decline:%channel: {
  ; Make sure it's the duelee who's declining the duel
  if (%duelee == $nick) {
    ; Turn off the timer that cancels the duel
    timerduel off
    ; Tell the chat that a duel has been declined
    msg $chan %duelee has declined the duel from %dueler and must live in dishonor forever.
    ; Reset all the variables involved to prevent any mix ups in the code for the next duel
    %duelee = null
    %dueler = null
    %stakes = null
  }
}
; On text event for someone checking their rank
on *:text:!rank*:%channel: {
  ; If they only have one value
  if ($0 = 1) {
    ; Make a window
    window @rank
    ; Load the basic ini into the window
    loadbuf -t @rank %ini
    ; Delete the first line which is the topic line
    dline @rank 1
    ; Clear the window and sort all the lines by their second value that is seperated by the equals sign
    ; This would be each users amount of points since each line is User=Points
    ; The sorting is in descending order and adds a number for their place. The top would be "1 User=Point" notice the space
    filter -cnteu 2 61 @rank @rank
    ; Filter out all the lines that don't contain the user's name
    filter -c @rank @rank $+(*,$nick,*)
    ; Make the variable the user's place by looking in the only line left for the first value
    ; Values are now seperated by a space which is character 32 in ASCII
    %rank = $gettok($line(@rank,1),1,32)
    ; Close the unneeded window
    window -c @rank
    ; Tell the user what their rank is for current points
    msg $chan $nick is %rank on the leaderboard for current %points
  }
  ; If 2 values are given
  else if ($0 = 2) {
    ; If the second value is not a number
    ; This is to see what rank a specific user is
    if ($2 !isnum) {
      ; Next 4 lines are just like the last rank check
      window @rank
      loadbuf -t @rank %ini
      dline @rank 1
      filter -cnteu 2 61 @rank @rank
      ; Filter out all the lines that don't contain the user specified
      filter -c @rank @rank $+(*,$2,*)
      ; Make the variable the first value that is seperated by a space
      %rank = $gettok($line(@rank,1),1,32)
      ; Make a variable that is the user's amount of points by choosing the second value sperated by an equals sign
      %amount = $gettok($line(@rank,1),2,61)
      ; Close the unneeded window
      window -c @rank
      ; Tell the chat what rank the specified user is and how many points they have
      msg $chan $2 is %rank on the leaderboard for current %points with %amount %points
    }
    ; If the second value is a number
    ; This is to see which user is at a specific rank
    else if ($2 isnum) {
      ; Next 4 lines are standard at this point
      window @rank
      loadbuf -t @rank %ini
      dline @rank 1
      filter -cnteu 2 61 @rank @rank
      ; Filter only the lines that start with the number given
      filter -c @rank @rank $+($2,*)
      ; Make the variable everything after the space/number from the first filter command
      %rank = $gettok($line(@rank,1),2,32)
      ; Make a variable the is the amount of points the user has by finding the 2 value seperated by an equals sign
      %amount = $gettok(%rank,2,61)
      ; Rewrite the first value to be everything before the equals sign
      %rank = $gettok(%rank,1,61)
      ; Tell the chat which user was at the specified rank and how many point they have
      msg $chan The user at rank $2 is %rank with %amount of %points
    }
  }
  ; Reset all the variables involved
  %rank = null
  %amount = null
}
; On text event for someone wanting to see their leaderboard rank
; This will be almost the exact same as the !rank command
on *:text:!alltimerank*:%channel: {
  ; If only 1 value is given
  if ($0 = 1) {
    ; Make a window
    window @rank
    ; Load the Leaderboard ini file into the window
    loadbuf -t @rank Leaderboard.ini
    ; Delete the first line which is just the topic line
    dline @rank 1
    ; Clear the window and sort all the lines by their second value that is seperated by the equals sign
    ; This would be each users amount of points since each line is User=Points
    ; The sorting is in descending order and adds a number for their place. The top would be "1 User=Point" notice the space
    filter -cnteu 2 61 @rank @rank
    ; Filter out all the lines that don't contain the user's name
    filter -c @rank @rank $+(*,$nick,*)
    ; Make the variable the first value (which is the line number from the first filter) which is seperated by a space
    %rank = $gettok($line(@rank,1),1,32)
    ; Make a variable that is the user's amount of points by choosing the second value that is seperated by an equals sign
    %amount = $gettok($line(@line,1),2,61)
    ; Close the unneeded window
    window -c @rank
    ; Message the chat what the user's rank was and how many points they have on the leaderboard
    msg $chan $nick is %rank on the leaderboard for all time %points with %amount %points
  }
  ; If 2 values are given
  else if ($0 = 2) {
    ; If the second value is not a number
    ; This is to find what rank a specific user is
    if ($2 !isnum) {
      ; Next 4 lines are the exact same as before
      window @rank
      loadbuf -t @rank Leaderboard.ini
      dline @rank 1
      filter -cnteu 2 61 @rank @rank
      ; Filter only the lines (read LINE) that contain the specified user's name
      filter -c @rank @rank $+(*,$2,*)
      ; Make the variable for their rank the first value that is seperated by a space
      %rank = $gettok($line(@rank,1),1,32)
      ; Make a variable that is the amount of points the specified user has by choosing the second value that is seperated by an equals sign
      %amount = $gettok($line(@rank,1),2,61)
      ; Close the unneeded window
      window -c @rank
      ; Message the chat what the specified user's rank was and how many points they have on the leaderboard
      msg $chan $2 is %rank on the leaderboard for all time %points
    }
    ; If the second value is a number
    ; This is to find out which user is at the specified rank on the leaderboard ini
    else if ($2 isnum) {
      ; Next 4 lines are standard at this point
      window @rank
      loadbuf -t @rank Leaderboard.ini
      dline @rank 1
      filter -cnteu 2 61 @rank @rank
      ; Filter only the lines that start with the number given
      filter -c @rank @rank $+($2,*)
      ; Make the variable everything after the space/number from the first filter command
      %rank = $gettok($line(@rank,1),2,32)
      ; Make a variable the is the amount of points the user has by finding the 2 value seperated by an equals sign
      %amount = $gettok(%rank,2,61)
      ; Rewrite the first value to be everything before the equals sign
      %rank = $gettok(%rank,1,61)
      ; Tell the chat which user was at the specified rank and how many points they have
      msg $chan The user at rank $2 is %rank with %amount of %points
    }
  }
  ; Reset all the variables involved
  %rank = null
  %amount = null
}
; Command to find out how many points a user needs to pass the user who has the next highest amount of points
on *:text:!tonextrank:%channel: {
  ; Make 2 windows
  window @rank
  window @rank2
  ; Load the basic points ini into the first window
  loadbuf -t @rank %ini
  ; Delete the topic line
  dline @rank 1
  ; Sort all the lines
  filter -cnteu 2 61 @rank @rank
  ; Filter over the one line that contains the user's name into the second window
  filter -c @rank @rank2 $+(*,$nick,*)
  ; Make a variable that is the user's rank
  %rank = $gettok($line(@rank2,1),1,32)
  ; Variable for how many points the user has
  %useramount = $gettok($line(@rank2,1),2,61)
  ; Decrease the rank variable to get the person one rank higher
  dec %rank
  ; Clear the second window and filter the user who is one rank above the original user
  filter -c @rank @rank2 $+(%rank,*)
  ; Get the higher ranked user's name and points in one variable
  %target = $gettok($line(@rank2,1),2,32)
  ; Get the higher ranekd user's amount of points
  %targetamount = $gettok(%target,2,61)
  ; Make the target variable JUST the name of the user with a higher rank
  %target = $gettok(%target,1,61)
  ; Calculate how many points the original user needs to surpass the higher ranked user
  %need = %targetamount - %useramount
  ; Message the chat
  msg $chan You need %need more points to pass %target who has %targetamount %points
  ; Reset all the variables
  %rank = null
  %useramount = null
  %target = null
  %targetamount = null
  %need = null
}
; EXACTLY the same as the previous command but for 2 exceptions
; The first is loading the leaderboard ini instead of the basic ini
; The other is telling the chat that the ranks are on the leaderboard
on *:text:!tonextalltimerank:%channel: {
  window @rank
  window @rank2
  loadbuf -t @rank Leaderboard.ini
  dline @rank 1
  filter -cnteu 2 61 @rank @rank
  filter -c @rank @rank2 $+(*,$nick,*)
  %rank = $gettok($line(@rank2,1),1,32)
  %useramount = $gettok($line(@rank2,1),2,61)
  dec %rank
  filter -c @rank @rank2 $+(%rank,*)
  %target = $gettok($line(@rank2,1),2,32)
  %targetamount = $gettok(%target,2,61)
  %target = $gettok(%target,1,61)
  %need = %targetamount - %useramount
  msg $chan You need %need more points to pass %target who has %targetamount %points on the Leaderboard
  %rank = null
  %useramount = null
  %target = null
  %targetamount = null
  %need = null
}
; Command for a user to see how many points they need to get to a certain rank
on *:text:!torank*:%channel: {
  ; Make sure only 2 values are given
  if ($0 = 2) {
    ; Open 2 windows
    window @rank
    window @rank2
    ; Load the basic ini into the first window
    loadbuf -t @rank %ini
    ; Delete the topic line
    dline @rank 1
    ; Standard filtering based on amount of points each user has
    filter -cnteu 2 61 @rank @rank
    ; Filter the user to the second window
    filter -c @rank @rank2 $+(*,$nick,*)
    ; If the user asked to get to the rank he's already at
    if ($gettok($line(@rank2,1),1,31) = $2) {
      ; Stop
      return
    }
    ; Make a variable for how many points the user has
    %useramount = $gettok($line(@rank2,1),2,61)
    ; Clear the second window before bringing the rank the user specified to it
    filter -c @rank @rank2 $+($2,*)
    ; Make everything after the rank a variable
    %target = $gettok($line(@rank2,1),2,32)
    ; Make a variable storing the amount of points the person at the specified rank has
    %targetamount = $gettok(%target,2,61)
    ; Remake the variable to be the user at the specified rank
    %target = $gettok(%target,1,61)
    ; If there is no difference in points
    if (%useramount = %targetamount) {
      msg $chan You have the same amount of %points as that rank.
    }
    ; If the target has more points
    else if (%targetamount > %useramount) {
      %need = %targetamount - %useramount
      ; Tell the user how many more points they need to get to the rank they want
      msg $chan You need %need more %points to reach rank $2 and pass %target who has %targetamount %points
    }
    ; If the target has less points
    else if (%targetamount < %useramount) {
      %need = %useramount - %targetamount
      ; Tell the user how many points ahead of the targeted rank they are
      msg $chan %target needs %need more %points to get from rank $2 to your rank.
    }
  }
  ; If more/less than 2 words were given
  else {
    msg $chan Only two words are allowed for this command
  }
}
; EXACTLY the same as the last one, except this command loads the leaderboard ini instead of the basic ini
on *:text:!toalltimerank*:%channel: {
  if ($0 = 2) {
    window @rank
    window @rank2
    loadbuf -t @rank Leaderboard.ini
    dline @rank 1
    filter -cnteu 2 61 @rank @rank
    filter -c @rank @rank2 $+(*,$nick,*)
    if ($gettok($line(@rank2,1),1,31) = $2) {
      return
    }
    %useramount = $gettok($line(@rank2,1),2,61)
    filter -c @rank @rank2 $+($2,*)
    %target = $gettok($line(@rank2,1),2,32)
    %targetamount = $gettok(%target,2,61)
    %target = $gettok(%target,1,61)
    if (%useramount = %targetamount) {
      msg $chan You have the same amount of %points as that rank.
    }
    else if (%targetamount > %useramount) {
      %need = %targetamount - %useramount
      msg $chan You need %need more %points to reach rank $2 and pass %target who has %targetamount %points
    }
    else if (%targetamount < %useramount) {
      %need = %useramount - %targetamount
      msg $chan %target needs %need more %points to get from rank $2 to your rank.
    }
  }
  else {
    msg $chan Only two words are allowed for this command
  }
}
; On text command for showing the top 5 user's with the most current points
on *:text:!leaderboard:%channel: {
  ; Make a window
  window @leaderboard
  ; Load the CURRENT points ini file into the window
  loadbuf -t @leaderboard %ini
  ; Remove the first line from the window since this only contains the topic
  dline @leaderboard 1
  ; Clear the window before sorting all the lines numerically
  ; The values are sorted based on the second value that is seperated by an equals sign
  ; This time we don't label each line with a number as we already know which lines we need
  filter -cteu 2 61 @leaderboard @leaderboard
  ; Tell the chat who the top 5 user's are by retrieving the first 5 lines in the window
  ; Because we don't seperate any values this will show each user's amount of points
  msg $chan The top 5 people are: $line(@leaderboard,1) $line(@leaderboard,2) $line(@leaderboard,3) $line(@leaderboard,4) $line(@leaderboard,5)
  ; Close the unneeded window
  window -c @leaderboard
}
; On text command for showing the top 5 user's with the most overal points
; Almost the exact same as the previous command
on *:text:!alltimeleaderboard:%channel: {
  ; Make a window
  window @leaderboard
  ; Load the leaderboard ini file into the window
  loadbuf -t @leaderboard Leaderboard.ini
  ; Remove the first line from the window since this only contains the topic
  dline @leaderboard 1
  ; The values are sorted based on the second value that is seperated by an equals sign
  ; This time we don't label each line with a number as we already know which lines we need
  filter -cteu 2 61 @leaderboard @leaderboard
  ; Tell the chat who the top 5 user's are by retrieving the first 5 lines in the window
  ; Because we don't seperate any values this will show each user's amount of total points
  msg $chan The top 5 people are: $line(@leaderboard,1) $line(@leaderboard,2) $line(@leaderboard,3) $line(@leaderboard,4) $line(@leaderboard,5)
  ; Close the unneeded window
  window -c @leaderboard
}
; The purpose of this command is more for Me as the creator. Every time someone enters the chat they are logged into both ini files
; Lots of people will leave after having a short sampling of the stream and never come back. However they will stay in the ini files
; This command was made to help keep the ini files clean and short, thus easier and faster to sort through
; Whenver this command is called, it will take away one point from every user in both ini files
; If the user's amount of points in either file reach 0, that user is removed from the file
on *:text:!daytax:%channel: {
  ; Make sure the user is the specified master of the bot
  if ($nick == bananamonkeytaco) {
    ; Make the variable equal to the amount of lines in the basic ini file
    %temp = $lines(%ini)
    ; The reason we make this repeat until the variable is one, is because at 1 it would be editing the topic line
    while (%temp > 1) {
      ; Take away 1 from the variable
      ; Yes, we do this before doing anything with it
      dec %temp
      ; The $ini identifier works as so. It looks in the ini file specified (%ini) and looks in the first topic (1) and returns the name of the item number given (%temp)
      ; It's almost exactly like $readini but a little bit broader
      ; It works with the writeini command here because writeini will not work with raw numbers
      ; So instead we feed the $ini the number which gives the writeini the actual value needed
      ; It works with $readini the same way
      ; The reason we decreased the %temp variable is because it is the TOTAL LINES of the ini files
      ; Because the topic is a line itself, the total lines is exactly one more line than the amount of lines in the topic itself
      ; Using all of this knowledge, this line simple takes one point away from each user, starting at the bottom
      writeini -n %ini %points $ini(%ini,1,%temp) $calc($readini(%ini,%points,$ini(%ini,1,%temp))-1)
      ; If a user's amount of points reaches 0
      if ($readini(%ini,%points,$ini(%ini,1,%temp)) < 1) {
        ; Remove the user's line from the ini file
        remini -n %ini %points $ini(%ini,1,%temp)
      }
    }
    ; Renew the variable to the total lines in the leaderboard ini file
    %temp = $lines(Leaderboard.ini)
    ; While the variable is more than one, same reason as before
    while (%temp > 1) {
      ; Immediately take away one from the variable
      dec %temp
      ; Take one point away from the user's all time points
      writeini -n Leaderboard.ini %points $ini(Leaderboard.ini,1,%temp) $calc($readini(Leaderboard.ini,%points,$ini(Leaderboard.ini,1,%temp))-1)
      ; If the user's amount of points reaches 0
      if ($readini(Leaderboard.ini,%points,$ini(Leaderboard.ini,1,%temp)) < 1) {
        ; Remove the user's line from the ini file
        remini -n Leaderboard.ini %points $ini(Leaderboard.ini,1,%temp)
      }
    }
  }
}
; Redeemable rewards section of the code
; First of two identical songrequests commands
; Tried to make a regex, worked for a bit until it activated for anything beginning with !s
; Now there is 2 commands
on *:text:!sr*:%channel: {
  ; Set a timer to virtually repeat what the user said
  ; There's no easy way to shut Nightbot (the bot controlling songrequests) up
  ; The solution to the problem is to set songrequests to moderators only, let nightbot yell, then redo the request using the bot
  ; The timer is because Nightbot will be fufilling the command to yell and won't listen to an immediate songrequest
  timersong 1 10 msg $chan !sr $2-
  ; Repeat the request
  msg $chan Redeeming a SongRequest for $nick at the cost of 20 %points
  ; Take away 20 points from the user
  writeini -n %ini %points $nick $calc($readini(%ini,%points,$nick)-20)
}
; Second song request command. Identical to the first
on *:text:!songrequest*:%channel: {
  timersong 1 10 msg $chan !sr $2-
  msg $chan Redeeming a SongRequest for $nick at the cost of 20 %points
  writeini -n %ini %points $nick $calc($readini(%ini,%points,$nick)-20)
}
; Reward for an invitation to the discord
on *:text:!discordreward:%channel: {
  ; Make sure the user has the amount of points needed
  if ($readini(%ini,%points,$nick) >= 300) {
    ; No simple way to set up actual whispers with other users
    ; Work-around is to message the chat but make Twitch intercept the whisper request
    msg $chan /w $nick Use this link to join the discord: https://discord.gg/xC7zc6n Also make sure to say in the chat when you join so my master can allow you to speak in the Discord. Also note that I am not able to respond in any way
  }
  ; If the user does not have the needed points
  else {
    ; Tell them to get more points
    msg $chan I'm sorry, but you do not have the 300 %points needed to redeem this reward.
  }
}
; Next 3 on text events are just silly things/inside jokes
; Any message containing "nowabot"
; Nowabot was the inspiration for this bot
on *:text:*nowabot*:%channel: {
  msg $chan Did someone say something about my dad?
}
; Any message containing "moobot"
; Moobot is just trash
on *:text:*moobot*:%channel: {
  msg $chan Did someone say moobot? Do you think I'm moobot? Are you trying to imply that I'm similar to that useless, filthy, garbage bot? How dare you.
}
; Message that is only "!yonder"
; Inside joke
on *:text:!yonder:%channel: {
  msg $chan ...
}
; Command to help with reusability
; Change the #bananamonkeytaco to the channel this bot will be used in
; Access to this code is needed for the reusability
on *:text:!set:#bananamonkeytaco: {
  ; This sets the global variable for the channel you want this bot to work in
  set %channel #bananamonkeytaco
  ; This sets the global variable for what the points will be called
  set %points Bananas
  ; Don't change this, just makes the basic ini file smalled and easier to use in the code
  set %ini $+(%points,.ini)
}
; Test to see if the global variable changed correctly
on *:text:something:#bananamonkeytaco: {
  msg $chan %channel
  msg $chan %ini
}
; Catch all on text event
; No on text events after this can be activated
on *:text:*:#: {
  return
}
on *:text:youcannotsaythiseversecretlostcoding:#: {
  else if ($1 == !dst) {
    if ($nick isop #bananamonkeytaco) {
      if ($2 == add) {
        %players = $addtok($3,%players,44)
        msg $chan $3 has been added to the current players
      }
      else if ($2 == del) {
        if ($findtok(%players,$3,44) != 0) {
          %players = $remtok(%players,$3,0,44)
          msg $chan $3 has been removed from the players.
        }
        else {
          msg $chan $3 is not in the player list. Please check the list for the correct player you wish to remove
        }
        else if ($2 == reset) {
          %players = $deltok(%players,1-,44)
          msg $chan Players have been reset.
        }
      }
      if ($0 == 1) {
        if ($numtok(%players,44) == 0) {
          msg $chan There are no players for DST at the moment.
        }
        else if ($numtok(%players,44) > 0) {
          msg $chan The current players for DST are %players
        }
      }
      else if ($2 == buy) {
        if ($numtok(%players,44) == 6) {
          msg $chan I'm sorry, there are 6 players already which is the maxium. If still wish to play you may try and buy out a player.
        }
        else if ($0 == 3 && $numtok(%players,44) == 0) {
          msg $chan $nick is attempting to buy out $3 from the DST server. They will have 5 minutes to respond or they will be replaced.
          writeini -n Bananas.ini Bananas $nick $calc($readini(Bananas.ini,Bananas,$nick)-200)
          timerreplace 1 300 $replacePlayer $nick $3
        }
        else {
          msg $chan $nick has bought into the DST server for 100 bananas and has been added to the player list.
          %players = $addtok($3,%players,44)
          writeini -n Bananas.ini Bananas $nick $calc($readini(Bananas.ini,Bananas,$nick)-100)
        }
      }
    }
  }
}
on $*:text:/^(!sr*|!songrequest*)/si:#: {
  timersong 1 10 msg $chan !songrequest $2-
  msg $chan Redeeming a SongRequest for $nick at the cost of 20 bananas.
  writeini -n Bananas.ini Bananas $nick $calc($readini(Bananas.ini,Bananas,$nick)-20)
}
